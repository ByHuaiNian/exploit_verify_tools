package cn.utils;

import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.NameValuePair;
import org.apache.http.client.ConnectionBackoffStrategy;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustAllStrategy;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.message.BasicHeader;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.util.EntityUtils;

import javax.net.ssl.SSLContext;
import java.io.IOException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HttpUtil {

    private PoolingHttpClientConnectionManager cm;
    CloseableHttpResponse response;
    public String url;
    public HashMap<String,String> headers;
    public String json_data;
    public List<NameValuePair> form_data;
    public HttpEntity file_entity;

    public HttpUtil(){

        //设置绕过https安全验证
        Registry<ConnectionSocketFactory> registry = null;
        try {
            registry = RegistryBuilder.<ConnectionSocketFactory>create()
                    .register("http", PlainConnectionSocketFactory.INSTANCE)
                    .register("https",trustHttpsCertificates())
                    .build();
            this.cm = new PoolingHttpClientConnectionManager(registry);
        } catch (Exception e) {
            e.printStackTrace();
        }
        //设置最大连接数
        cm.setMaxTotal(100);
        //设置每个主机最大连接数
        cm.setDefaultMaxPerRoute(10);
    }

    /**
     * 设置绕过https安全验证
     * @return
     * @throws Exception
     */
    private ConnectionSocketFactory trustHttpsCertificates() throws Exception {
        SSLContextBuilder sslContextBuilder = new SSLContextBuilder();
        sslContextBuilder.loadTrustMaterial(null, new TrustStrategy() {
            @Override
            public boolean isTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
                return true;
            }
        });
        SSLContext sslContext = sslContextBuilder.build();

        SSLConnectionSocketFactory sslConnectionSocketFactory = new
                SSLConnectionSocketFactory(sslContext,
                new String[]{"SSLv2Hello","SSLv3","TLSv1","TLSv1.1","TLSv1.2"}
                ,null, NoopHostnameVerifier.INSTANCE);

        return sslConnectionSocketFactory;
    }

    public CloseableHttpClient getHttpClient(){
        return HttpClients.custom().setConnectionManager(this.cm).build();
    }


    public String[] doGet() {
        String[] result = new String[2];
        CloseableHttpClient httpclient = getHttpClient();
        HttpGet httpget = new HttpGet(url);
        //设置代理及超时
        HttpHost proxy = new HttpHost("127.0.0.1", 8888, "http");
        RequestConfig resconf = RequestConfig.custom()
        //        .setProxy(proxy)
                .setConnectTimeout(10000)
                .setSocketTimeout(10000)
                .setConnectionRequestTimeout(5000)
                .build();
        httpget.setConfig(resconf);
        //设置自定义header头
        for(Map.Entry e : headers.entrySet()){
            httpget.setHeader(e.getKey().toString(),e.getValue().toString());
        }


        try {
            //发送请求并返回请求值
            response = httpclient.execute(httpget);
            //获取响应码
            result[0] = Integer.toString(response.getStatusLine().getStatusCode());
            //获取响应体
            HttpEntity httpenti = response.getEntity();
            //获取响应体静态页面
            String content = EntityUtils.toString(httpenti,"utf-8");
            result[1] = content;

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if(response!=null){
                    response.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            //返回一个String数组，为状态码和返回内容
            return result;
        }

    }

    public String[] doPost(boolean isJson) {
        String[] result = new String[2];
        CloseableHttpClient httpclient = getHttpClient();
        HttpPost httpPost = new HttpPost(url);
        //设置代理及超时
        HttpHost proxy = new HttpHost("127.0.0.1", 8888, "http");
        RequestConfig resconf = RequestConfig.custom()
                //.setProxy(proxy)
                .setConnectTimeout(10000) //连接网站超时
                .setSocketTimeout(10000) //返回数据超时
                .setConnectionRequestTimeout(5000) //从连接池获取connection超时
                .build();
        httpPost.setConfig(resconf);
        //设置自定义header头
        for(Map.Entry e : headers.entrySet()){
            httpPost.setHeader(e.getKey().toString(),e.getValue().toString());
        }

        try {
            //声明表单entity对象
            UrlEncodedFormEntity formEntity;
            StringEntity jsonEntity;
            if(isJson == true){
                jsonEntity = new StringEntity(json_data,Consts.UTF_8);
                jsonEntity.setContentEncoding(Consts.UTF_8.name());
                httpPost.setEntity(jsonEntity);
            }else{
                //不需要URL编码时进行自己拼接
//                StringBuffer sb = new StringBuffer();
//                for(NameValuePair nameValuePair : form_data){
//                    sb.append(nameValuePair.getName()+"=").append(nameValuePair.getValue());
//                }
//                jsonEntity = new StringEntity(sb.toString(),Consts.UTF_8);
                formEntity = new UrlEncodedFormEntity(form_data,Consts.UTF_8);
                httpPost.setEntity(formEntity);
            }

            //发送请求并返回请求值
            response = httpclient.execute(httpPost);
            //获取响应码
            result[0] = Integer.toString(response.getStatusLine().getStatusCode());
            //获取响应体
            HttpEntity httpenti = response.getEntity();
            //获取响应体静态页面
            String content = EntityUtils.toString(httpenti,"utf-8");
            result[1] = content;

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if(response!=null){
                    response.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            //返回一个String数组，为状态码和返回内容
            return result;
        }

    }

    public String[] doPost_upload() {
        String[] result = new String[2];
        CloseableHttpClient httpclient = getHttpClient();
        HttpPost httpPost = new HttpPost(url);
        //设置代理及超时
        HttpHost proxy = new HttpHost("127.0.0.1", 8888, "http");
        RequestConfig resconf = RequestConfig.custom()
                //.setProxy(proxy)
                .setConnectTimeout(10000)
                .setSocketTimeout(10000)
                .setConnectionRequestTimeout(5000)
                .build();
        httpPost.setConfig(resconf);
        //设置自定义header头
        for(Map.Entry e : headers.entrySet()){
            httpPost.setHeader(e.getKey().toString(),e.getValue().toString());
        }

        try {
            httpPost.setEntity(file_entity);

            //发送请求并返回请求值
            response = httpclient.execute(httpPost);
            //获取响应码
            result[0] = Integer.toString(response.getStatusLine().getStatusCode());
            //获取响应体
            HttpEntity httpenti = response.getEntity();
            //获取响应体静态页面
            String content = EntityUtils.toString(httpenti,"utf-8");
            result[1] = content;

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if(response!=null){
                    response.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            //返回一个String数组，为状态码和返回内容
            return result;
        }
    }

}
