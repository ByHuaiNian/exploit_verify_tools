package cn.gui;

import cn.model.CmsType;
import cn.model.ExpInfo;
import cn.utils.JsonUtil;
import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.util.List;

/**
 * GUI主类
 */
public class MainGui extends Application {

    Button button;
    TextField textField;
    Label label;
    TableView<CmsType> left_table_view;
    TableView<ExpInfo> right_table_view;
    List<ExpInfo> expInfoList = JsonUtil.getExpJson();
    List<CmsType> cmsTypeList = JsonUtil.getCmsJson();


    public static void main(String[] args) {
        launch(args);
    }

    /**
     * 重写start方法
     * @param primaryStage
     * @throws Exception
     */
    @Override
    public void start(Stage primaryStage) throws Exception {
        //设置布局控件
        BorderPane borderPane = new BorderPane();

        //设置其他插件
        setContent(borderPane);
        //设置左表格
        setLeftTableView(borderPane);
        //设置右表格
        setRightTableView(borderPane);

        //把布局控件放入场景,设置界面长度和宽度
        Scene scene= new Scene(borderPane,1000,600);
        //设置场景
        primaryStage.setScene(scene);
        //界面不可拉动
        primaryStage.setResizable(false);
        primaryStage.setTitle("exploit_verify_tools——ByHuaiNian");
        //显示界面
        primaryStage.show();
    }


    /**
     * 设置界面其他内容
     * @param borderPane
     */
    public void setContent(BorderPane borderPane){
        button= new Button("查询");
        //button.setMinWidth(100); //最小宽度
        button.setPrefWidth(100); //最佳宽度
        button.setDisable(false); //显示按钮
        textField = new TextField();
        textField.setPromptText("请输入要查询的内容");
        label = new Label("漏洞名称");

        //设置按钮点击事件,根据名称查询
        button.setOnMouseClicked(new EventHandler<MouseEvent>(){
            public void handle(MouseEvent event) {
                String queryStr = textField.getText();
                right_table_view.getItems().clear();
                if(queryStr.equals("")){
                    for(ExpInfo expInfo:expInfoList){
                        right_table_view.getItems().add(expInfo);
                    }
                }else{
                    for(ExpInfo expInfo:expInfoList){
                        if(expInfo.getName().toLowerCase().contains(queryStr.toLowerCase())){
                            right_table_view.getItems().add(expInfo);
                        }
                    }
                }
            }
        });

        HBox.setHgrow(textField, Priority.ALWAYS);//让textField控件铺满一整行
        //水平显示布局
        HBox Hbox = new HBox();
        Hbox.setAlignment(Pos.CENTER); //界面居中显示
        Hbox.setPadding(new Insets(20));//调整边界距离
        Hbox.setSpacing(10);//每个控件之间的间距
        //将控件添加布局
        Hbox.getChildren().addAll(label,textField,button);
        //设置头部布局
        borderPane.setTop(Hbox);
    }


    /**
     * 设置左表格内容
     * @param borderPane
     */
    public void setLeftTableView(BorderPane borderPane){
        VBox vbox = new VBox(); // 创建一个垂直箱子
        vbox.setPadding(new Insets(10,10,10,20));
        vbox.setAlignment(Pos.CENTER);
        //设置表格数据
        ObservableList<CmsType> obList = FXCollections.observableArrayList(cmsTypeList);
        left_table_view= new TableView<CmsType>(obList); // 依据指定数据创建表格视图

        left_table_view.setPrefSize(200, 500); // 设置表格视图的宽高
        TableColumn firstColumn = new TableColumn("产品名称"); // 创建一个表格列
        firstColumn.setPrefWidth(198);
        firstColumn.setCellValueFactory(new PropertyValueFactory<CmsType,String>("cmsName"));

        //设置表格选中事件
        left_table_view.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<CmsType>() {
            @Override
            public void changed(ObservableValue<? extends CmsType> observable, CmsType oldValue, CmsType newValue) {
                //获取当前cms类型
                String cmsType = newValue.getCmsName();
                right_table_view.getItems().clear();
                for(ExpInfo expInfo:expInfoList){
                    if(expInfo.getCmsType().getCmsName().equals(cmsType)){
                        right_table_view.getItems().add(expInfo);
                    }
                }
            }
        });

        left_table_view.getColumns().addAll(firstColumn);
        vbox.getChildren().add(left_table_view); // 把表格加到垂直箱子上
        borderPane.setLeft(vbox); // 把垂直箱子放到边界窗格的中央
    }


    /**
     * 设置右格内容
     * @param borderPane
     */
    public void setRightTableView(BorderPane borderPane){
        VBox vbox = new VBox(); // 创建一个垂直箱子
        vbox.setPadding(new Insets(10,20,10,0));
        vbox.setAlignment(Pos.CENTER);
        //设置数据
        ObservableList<ExpInfo> obList = FXCollections.observableArrayList();
        obList.addAll(expInfoList);
        right_table_view = new TableView<ExpInfo>(obList); // 依据指定数据创建表格视图

        right_table_view.setPrefSize(750, 500); // 设置表格视图的宽高
        //设置列
        TableColumn<ExpInfo,String> nameColumn = new TableColumn<ExpInfo,String>("漏洞名"); // 创建一个表格列
        nameColumn.setMinWidth(200);
        nameColumn.setCellValueFactory(new PropertyValueFactory<ExpInfo, String>("name"));

        TableColumn<ExpInfo,String> typeColumn = new TableColumn<ExpInfo,String>("漏洞类型");
        typeColumn.setMinWidth(50);
        typeColumn.setCellValueFactory(new PropertyValueFactory<ExpInfo, String>("type"));

        TableColumn<ExpInfo,String> timeColumn = new TableColumn<ExpInfo,String>("时间");
        timeColumn.setMinWidth(50);
        timeColumn.setCellValueFactory(new PropertyValueFactory<ExpInfo, String>("time"));

        TableColumn<ExpInfo,String> infoColumn = new TableColumn<ExpInfo,String>("描述");
        infoColumn.setMinWidth(200);
        infoColumn.setCellValueFactory(new PropertyValueFactory<ExpInfo, String>("info"));

        ContextMenu contextMenu = new ContextMenu();
        MenuItem menuItem = new MenuItem("验证漏洞");
        //验证漏洞
        menuItem.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent event) {
                String className = right_table_view.getSelectionModel().getSelectedItem().getClassName();
                String expName = right_table_view.getSelectionModel().getSelectedItem().getName();
                ExploitGui exploitGui = new ExploitGui();
                try {
                    //开启新窗口
                    exploitGui.display(className,expName);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        contextMenu.getItems().add(menuItem);
        right_table_view.setContextMenu(contextMenu);

        right_table_view.getColumns().addAll(nameColumn,typeColumn,timeColumn,infoColumn);

        right_table_view.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        vbox.getChildren().add(right_table_view); // 把表格加到垂直箱子上
        borderPane.setRight(vbox); // 把垂直箱子放到边界窗格的中央
    }

}
