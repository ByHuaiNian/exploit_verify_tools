package cn.gui;

import cn.exploit.ExploitFather;
import cn.task.MyTask;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.lang.reflect.Method;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ExploitGui {

    public Label urlLabel;
    public Button verButton;
    public TextField urlTextfield;
    public Label cmdLabel;
    public TextField cmdTextfield;
    public Button execButton;
    public TextArea textArea;
    public String className;
    public String expName;

    public void display(String cname,String ename) throws Exception {
        className = cname;
        expName = ename;
        Stage stage = new Stage();
        //设置主窗口锁定
        stage.initModality(Modality.APPLICATION_MODAL);
        start(stage);
    }

    public void start(Stage primaryStage) throws Exception{
        BorderPane borderPane = new BorderPane();

        setTop(borderPane,primaryStage);
        setCenter(borderPane);
        //把布局控件放入场景,设置界面长度和宽度
        Scene scene= new Scene(borderPane,700,500);
        //设置场景
        primaryStage.setScene(scene);
        primaryStage.setTitle(expName+" 漏洞验证");
        //显示界面
        primaryStage.show();
    }

    /**
     * 设置顶部布局
     * @param borderPane
     */
    public void setTop(BorderPane borderPane,Stage primaryStage){
        //第一行控件
        urlLabel = new Label("URL");
        urlTextfield = new TextField();
        urlTextfield.setPromptText("请输入URL http|https://xxxx");
        urlTextfield.setPrefWidth(400);
        verButton= new Button("漏洞验证");
        verButton.setPrefWidth(100); //最佳宽度
        //第二行控件
        cmdLabel= new Label("额外参数");
        cmdTextfield = new TextField();
        cmdTextfield.setPromptText("cmd/文件读取路径/...");
        execButton = new Button("漏洞利用");
        //execButton.setDisable(true);
        execButton.setPrefWidth(100);


        //点击验证
        verButton.setOnMouseClicked(new EventHandler<MouseEvent>(){
            public void handle(MouseEvent event) {
                String url = urlTextfield.getText();

                String pattern = "http|https:\\/\\/.*";
                Pattern r = Pattern.compile(pattern);
                Matcher m = r.matcher(url);
                if(m.find()){
                    //通过设置task任务 完善请求造成的窗体未响应。
                    MyTask task = new MyTask();
                    task.setUrl(url);
                    task.setClassname(className);
                    task.setPoc(true);
                    task.setTextArea(textArea);
                    //task.valueProperty().addListener(new MyTaskListener());

                    ProgressFrom progressFrom = new ProgressFrom(task,primaryStage);
                    progressFrom.activateProgressBar();
                }else{
                    textArea.setText("url格式错误");
                }
            }
        });

        //漏洞利用
        execButton.setOnMouseClicked(new EventHandler<MouseEvent>(){
            public void handle(MouseEvent event) {
                String url = urlTextfield.getText();
                String payload = cmdTextfield.getText();

                String pattern = "http|https:\\/\\/.*";
                Pattern r = Pattern.compile(pattern);
                Matcher m = r.matcher(url);
                if(m.find()){
                    MyTask task = new MyTask();
                    task.setUrl(url);
                    task.setClassname(className);
                    task.setPoc(false);
                    task.setTextArea(textArea);
                    task.setPayload(payload);
                    //task.valueProperty().addListener(new MyTaskListener());

                    ProgressFrom progressFrom = new ProgressFrom(task,primaryStage);
                    progressFrom.activateProgressBar();
                }else{
                    textArea.setText("url格式错误");
                }
            }
        });

        //设置Grid布局
        GridPane pane = new GridPane();
        pane.setAlignment(Pos.TOP_CENTER);
        pane.setHgap(10);
        pane.setVgap(10);


        //设置布局
        pane.add(urlLabel,0,0);
        pane.add(urlTextfield,1,0);
        pane.add(verButton,2,0);
        pane.add(cmdLabel,0,1);
        pane.add(cmdTextfield,1,1);
        pane.add(execButton,2,1);

        HBox Hbox = new HBox();//水平控件
        Hbox.setAlignment(Pos.CENTER); //界面居中显示
        Hbox.setPadding(new Insets(20,10,0,10));
        Hbox.getChildren().addAll(pane);

        borderPane.setTop(Hbox);
    }

    /**
     * 设置中央布局
     * @param borderPane
     */
    public void setCenter(BorderPane borderPane){
        textArea = new TextArea();
        textArea.setText("---结果集---");
        textArea.setPrefHeight(400);

        VBox vbox = new VBox();
        vbox.getChildren().addAll(textArea);
        vbox.setPadding(new Insets(20));
        vbox.setAlignment(Pos.TOP_CENTER);

        borderPane.setCenter(vbox);
    }

//    /**
//     * 通过反射调用poc
//     */
//    public void startVer(String url,String classname){
//        String name = "cn.exploit."+classname;
//        Class pocClass= null;
//        try {
//            pocClass = Class.forName(name);
//            ExploitFather exploitFather = (ExploitFather)pocClass.newInstance();
//            Method method = pocClass.getMethod("poc",String.class);
//            Object result = method.invoke(exploitFather,url);
//
//            textArea.setText(result.toString());
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//
//    public void startExp(String url,String classname,String payload){
//        String name = "cn.exploit."+classname;
//        Class pocClass= null;
//        try {
//            pocClass = Class.forName(name);
//            ExploitFather exploitFather = (ExploitFather)pocClass.newInstance();
//            Method method = pocClass.getMethod("exp",String.class,String.class);
//            Object result = method.invoke(exploitFather,url,payload);
//
//            textArea.setText(result.toString());
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
}
